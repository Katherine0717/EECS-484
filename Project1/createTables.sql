CREATE TABLE USERS
    (USER_ID INTEGER PRIMARY KEY,
    FIRST_NAME VARCHAR2(100) NOT NULL,
    LAST_NAME VARCHAR2(100) NOT NULL,
    YEAR_OF_BIRTH INTEGER,
    MONTH_OF_BIRTH INTEGER,
    DAY_OF_BIRTH INTEGER,
    GENDER VARCHAR2(100));

CREATE TABLE FRIENDS
    (USER1_ID INTEGER NOT NULL,
    USER2_ID INTEGER NOT NULL,
    PRIMARY KEY (USER1_ID, USER2_ID),
    FOREIGN KEY (USER1_ID) REFERENCES USERS,
    FOREIGN KEY (USER2_ID) REFERENCES USERS);

CREATE TABLE CITIES
    (CITY_ID INTEGER PRIMARY KEY,
    CITY_NAME VARCHAR2(100) NOT NULL,
    STATE_NAME VARCHAR2(100) NOT NULL,
    COUNTRY_NAME VARCHAR2(100) NOT NULL,
    UNIQUE (CITY_NAME, STATE_NAME, COUNTRY_NAME));
    
CREATE TABLE USER_CURRENT_CITIES
    (USER_ID INTEGER PRIMARY KEY,
    CURRENT_CITY_ID INTEGER NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS,
    FOREIGN KEY (CURRENT_CITY_ID) REFERENCES CITIES(CITY_ID));

CREATE TABLE USER_HOMETOWN_CITIES
    (USER_ID INTEGER PRIMARY KEY,
    HOMETOWN_CITY_ID INTEGER NOT NULL,
    FOREIGN KEY (USER_ID) REFERENCES USERS,
    FOREIGN KEY (HOMETOWN_CITY_ID) REFERENCES CITIES);

CREATE TABLE MESSAGES
    (MESSAGE_ID INTEGER PRIMARY KEY,
    SENDER_ID INTEGER NOT NULL,
    RECEIVER_ID INTEGER NOT NULL,
    MESSAGE_CONTENT VARCHAR2(2000) NOT NULL,
    SENT_TIME TIMESTAMP NOT NULL,
    FOREIGN KEY (RECEIVER_ID) REFERENCES USERS(USER_ID),
    FOREIGN KEY (SENDER_ID) REFERENCES USERS(USER_ID));

CREATE TABLE PROGRAMS
    (PROGRAM_ID INTEGER PRIMARY KEY,
    INSTITUTION VARCHAR2(100) NOT NULL,
    CONCENTRATION VARCHAR2(100) NOT NULL,
    DEGREE VARCHAR2(100) NOT NULL,
    UNIQUE (INSTITUTION, CONCENTRATION, DEGREE));

CREATE TABLE EDUCATION
    (USER_ID INTEGER,
    PROGRAM_ID INTEGER,
    PROGRAM_YEAR INTEGER NOT NULL,
    PRIMARY KEY (USER_ID, PROGRAM_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS,
    FOREIGN KEY (PROGRAM_ID) REFERENCES PROGRAMS);

CREATE TABLE USER_EVENTS
    (EVENT_ID INTEGER PRIMARY KEY,
    EVENT_CREATOR_ID INTEGER NOT NULL,
    EVENT_NAME VARCHAR2(100) NOT NULL,
    EVENT_TAGLINE VARCHAR2(100),
    EVENT_DESCRIPTION VARCHAR2(100),
    EVENT_HOST VARCHAR2(100),
    EVENT_TYPE VARCHAR2(100),
    EVENT_SUBTYPE VARCHAR2(100),
    EVENT_ADDRESS VARCHAR2(2000),
    EVENT_CITY_ID INTEGER NOT NULL,
    EVENT_START_TIME TIMESTAMP,
    EVENT_END_TIME TIMESTAMP,
    FOREIGN KEY (EVENT_CITY_ID) REFERENCES CITIES(CITY_ID),
    FOREIGN KEY (EVENT_CREATOR_ID) REFERENCES USERS(USER_ID));

CREATE TABLE PARTICIPANTS
    (EVENT_ID INTEGER,
    USER_ID INTEGER,
    CONFIRMATION VARCHAR2(100) NOT NULL,
    PRIMARY KEY (EVENT_ID, USER_ID),
    FOREIGN KEY (EVENT_ID) REFERENCES USER_EVENTS,
    FOREIGN KEY (USER_ID) REFERENCES USERS,
    -- Confirmation must be one of these options (case-sensitive): ATTENDING, UNSURE, DECLINES, or NOT_REPLIED
    CHECK (CONFIRMATION = 'ATTENDING' or CONFIRMATION = 'UNSURE' or CONFIRMATION = 'DECLINES' OR CONFIRMATION = 'NOT_REPLIED'));

CREATE TABLE ALBUMS
    (ALBUM_ID INTEGER PRIMARY KEY,
    ALBUM_OWNER_ID INTEGER NOT NULL,
    ALBUM_NAME VARCHAR2(100) NOT NULL,
    ALBUM_CREATED_TIME TIMESTAMP NOT NULL,
    ALBUM_MODIFIED_TIME TIMESTAMP,
    ALBUM_LINK VARCHAR2(100) NOT NULL,
    ALBUM_VISIBILITY VARCHAR2(100),
    CHECK (ALBUM_VISIBILITY = 'EVERYONE' OR ALBUM_VISIBILITY = 'FRIENDS' OR ALBUM_VISIBILITY = 'FRIENDS_OF_FRIENDS' OR ALBUM_VISIBILITY = 'MYSELF'),
-- Album_visibility must be one of these options (case-sensitive): EVERYONE, FRIENDS, FRIENDS_OF_FRIENDS, or MYSELF
    COVER_PHOTO_ID INTEGER NOT NULL,
    FOREIGN KEY (ALBUM_OWNER_ID) REFERENCES USERS(USER_ID));

CREATE TABLE PHOTOS
    (PHOTO_ID INTEGER PRIMARY KEY,
    ALBUM_ID INTEGER NOT NULL,
    PHOTO_CAPTION VARCHAR2(2000),
    PHOTO_CREATED_TIME TIMESTAMP NOT NULL,
    PHOTO_MODIFIED_TIME TIMESTAMP,
    PHOTO_LINK VARCHAR2(2000) NOT NULL);

ALTER TABLE ALBUMS
ADD CONSTRAINT ALBUM_IN_PHOTO
FOREIGN KEY(cover_photo_id) REFERENCES PHOTOS(photo_id)
INITIALLY DEFERRED DEFERRABLE;

ALTER TABLE PHOTOS
ADD CONSTRAINT PHOTO_IN_ALBUMS
FOREIGN KEY (ALBUM_ID) REFERENCES ALBUMS
INITIALLY DEFERRED DEFERRABLE;

CREATE TABLE TAGS
    (TAG_PHOTO_ID INTEGER NOT NULL,
    TAG_SUBJECT_ID INTEGER NOT NULL,
    TAG_CREATED_TIME TIMESTAMP NOT NULL,
    TAG_X INTEGER NOT NULL,
    TAG_Y INTEGER NOT NULL,
    PRIMARY KEY (TAG_PHOTO_ID, TAG_SUBJECT_ID),
    FOREIGN KEY (TAG_PHOTO_ID) REFERENCES PHOTOS,
    FOREIGN KEY (TAG_SUBJECT_ID) REFERENCES USERS);


CREATE SEQUENCE CITY_ID_SEQUENCE
    START WITH 1
    INCREMENT BY 1;

CREATE TRIGGER CITY_ID_TRIGGER
    BEFORE INSERT ON CITIES
    FOR EACH ROW
    BEGIN
        SELECT CITY_ID_SEQUENCE.NEXTVAL INTO :NEW.CITY_ID FROM DUAL;
    END;
/

CREATE SEQUENCE PROGRAMS_ID_SEQUENCE
    START WITH 1
    INCREMENT BY 1;

CREATE TRIGGER PROGRAMS_ID_TRIGGER
    BEFORE INSERT ON PROGRAMS
    FOR EACH ROW
    BEGIN
        SELECT PROGRAMS_ID_SEQUENCE.NEXTVAL INTO :NEW.PROGRAM_ID FROM DUAL;
    END;
/

CREATE TRIGGER Order_Friend_Pairs
    BEFORE INSERT ON FRIENDS
    FOR EACH ROW
        DECLARE temp INTEGER;
        BEGIN
            IF :NEW.USER1_ID > :NEW.USER2_ID THEN
            temp := :NEW.USER2_ID; :NEW.USER2_ID := :NEW.USER1_ID; :NEW.USER1_ID := temp;
            END IF;
        END;
/